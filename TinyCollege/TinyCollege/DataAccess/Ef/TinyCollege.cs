

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "TinyCollege\App.config"
//     Connection String Name: "TinyCollegeContext"
//     Connection String:      "Data Source=LAPTOP-VPLAC25E;Initial Catalog=TinyCollege;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

namespace TinyCollege.DataAccess.Ef
{
    using System.Linq;

    #region Unit of work

    public interface ITinyCollegeContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Building> Buildings { get; set; } // BUILDING
        System.Data.Entity.DbSet<Class> Classes { get; set; } // CLASS
        System.Data.Entity.DbSet<Course> Courses { get; set; } // COURSE
        System.Data.Entity.DbSet<Department> Departments { get; set; } // DEPARTMENT
        System.Data.Entity.DbSet<Enrollment> Enrollments { get; set; } // ENROLLMENT
        System.Data.Entity.DbSet<Grade> Grades { get; set; } // GRADE
        System.Data.Entity.DbSet<Professor> Professors { get; set; } // PROFESSOR
        System.Data.Entity.DbSet<Room> Rooms { get; set; } // ROOM
        System.Data.Entity.DbSet<School> Schools { get; set; } // SCHOOL
        System.Data.Entity.DbSet<Student> Students { get; set; } // STUDENT
        System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class TinyCollegeContext : System.Data.Entity.DbContext, ITinyCollegeContext
    {
        public System.Data.Entity.DbSet<Building> Buildings { get; set; } // BUILDING
        public System.Data.Entity.DbSet<Class> Classes { get; set; } // CLASS
        public System.Data.Entity.DbSet<Course> Courses { get; set; } // COURSE
        public System.Data.Entity.DbSet<Department> Departments { get; set; } // DEPARTMENT
        public System.Data.Entity.DbSet<Enrollment> Enrollments { get; set; } // ENROLLMENT
        public System.Data.Entity.DbSet<Grade> Grades { get; set; } // GRADE
        public System.Data.Entity.DbSet<Professor> Professors { get; set; } // PROFESSOR
        public System.Data.Entity.DbSet<Room> Rooms { get; set; } // ROOM
        public System.Data.Entity.DbSet<School> Schools { get; set; } // SCHOOL
        public System.Data.Entity.DbSet<Student> Students { get; set; } // STUDENT
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; } // sysdiagrams

        static TinyCollegeContext()
        {
            System.Data.Entity.Database.SetInitializer<TinyCollegeContext>(null);
        }

        public TinyCollegeContext()
            : base("Name=TinyCollegeContext")
        {
        }

        public TinyCollegeContext(string connectionString)
            : base(connectionString)
        {
        }

        public TinyCollegeContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public TinyCollegeContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public TinyCollegeContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new BuildingConfiguration());
            modelBuilder.Configurations.Add(new ClassConfiguration());
            modelBuilder.Configurations.Add(new CourseConfiguration());
            modelBuilder.Configurations.Add(new DepartmentConfiguration());
            modelBuilder.Configurations.Add(new EnrollmentConfiguration());
            modelBuilder.Configurations.Add(new GradeConfiguration());
            modelBuilder.Configurations.Add(new ProfessorConfiguration());
            modelBuilder.Configurations.Add(new RoomConfiguration());
            modelBuilder.Configurations.Add(new SchoolConfiguration());
            modelBuilder.Configurations.Add(new StudentConfiguration());
            modelBuilder.Configurations.Add(new SysdiagramConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new BuildingConfiguration(schema));
            modelBuilder.Configurations.Add(new ClassConfiguration(schema));
            modelBuilder.Configurations.Add(new CourseConfiguration(schema));
            modelBuilder.Configurations.Add(new DepartmentConfiguration(schema));
            modelBuilder.Configurations.Add(new EnrollmentConfiguration(schema));
            modelBuilder.Configurations.Add(new GradeConfiguration(schema));
            modelBuilder.Configurations.Add(new ProfessorConfiguration(schema));
            modelBuilder.Configurations.Add(new RoomConfiguration(schema));
            modelBuilder.Configurations.Add(new SchoolConfiguration(schema));
            modelBuilder.Configurations.Add(new StudentConfiguration(schema));
            modelBuilder.Configurations.Add(new SysdiagramConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeTinyCollegeContext : ITinyCollegeContext
    {
        public System.Data.Entity.DbSet<Building> Buildings { get; set; }
        public System.Data.Entity.DbSet<Class> Classes { get; set; }
        public System.Data.Entity.DbSet<Course> Courses { get; set; }
        public System.Data.Entity.DbSet<Department> Departments { get; set; }
        public System.Data.Entity.DbSet<Enrollment> Enrollments { get; set; }
        public System.Data.Entity.DbSet<Grade> Grades { get; set; }
        public System.Data.Entity.DbSet<Professor> Professors { get; set; }
        public System.Data.Entity.DbSet<Room> Rooms { get; set; }
        public System.Data.Entity.DbSet<School> Schools { get; set; }
        public System.Data.Entity.DbSet<Student> Students { get; set; }
        public System.Data.Entity.DbSet<Sysdiagram> Sysdiagrams { get; set; }

        public FakeTinyCollegeContext()
        {
            Buildings = new FakeDbSet<Building>("BuildingId");
            Classes = new FakeDbSet<Class>("ClassId");
            Courses = new FakeDbSet<Course>("CourseId");
            Departments = new FakeDbSet<Department>("DepartmentId");
            Enrollments = new FakeDbSet<Enrollment>("EnrollmentId");
            Grades = new FakeDbSet<Grade>("GradeId");
            Professors = new FakeDbSet<Professor>("ProfessorId");
            Rooms = new FakeDbSet<Room>("RoomId");
            Schools = new FakeDbSet<School>("SchoolId");
            Students = new FakeDbSet<Student>("StudentId");
            Sysdiagrams = new FakeDbSet<Sysdiagram>("DiagramId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }
    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // BUILDING
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Building
    {
        public int BuildingId { get; set; } // BuildingID (Primary key)
        public string BuildingName { get; set; } // BuildingName (length: 100)
        public string BuildingLocation { get; set; } // BuildingLocation (length: 200)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Room> Rooms { get; set; } // ROOM.FK_ROOM_BUILDING

        public Building()
        {
            Rooms = new System.Collections.Generic.List<Room>();
        }
    }

    // CLASS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Class
    {
        public string ClassId { get; set; } // ClassID (Primary key) (length: 50)
        public string ClassName { get; set; } // ClassName (length: 100)
        public string Time { get; set; } // Time (length: 1000)
        public string CourseId { get; set; } // CourseID (length: 50)
        public int? ProfessorId { get; set; } // ProfessorID
        public int? Capacity { get; set; } // Capacity
        public string Day { get; set; } // Day (length: 50)
        public int? RoomId { get; set; } // RoomID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Enrollment> Enrollments { get; set; } // ENROLLMENT.FK_ENROLLMENT_CLASS

        // Foreign keys
        public virtual Course Course { get; set; } // FK_CLASS_COURSE
        public virtual Professor Professor { get; set; } // FK_CLASS_PROFESSOR
        public virtual Room Room { get; set; } // FK_CLASS_ROOM

        public Class()
        {
            Enrollments = new System.Collections.Generic.List<Enrollment>();
        }
    }

    // COURSE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Course
    {
        public string CourseId { get; set; } // CourseID (Primary key) (length: 50)
        public string CourseName { get; set; } // CourseName (length: 200)
        public int? CourseUnits { get; set; } // CourseUnits
        public bool? IsPostGraduate { get; set; } // IsPostGraduate
        public int? DepartmentId { get; set; } // DepartmentID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Class> Classes { get; set; } // CLASS.FK_CLASS_COURSE

        // Foreign keys
        public virtual Department Department { get; set; } // FK_COURSE_DEPARTMENT

        public Course()
        {
            Classes = new System.Collections.Generic.List<Class>();
        }
    }

    // DEPARTMENT
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Department
    {
        public int DepartmentId { get; set; } // DepartmentID (Primary key)
        public string DepartmentName { get; set; } // DepartmentName (length: 100)
        public int? SchoolId { get; set; } // SchoolID
        public int? ProfessorId { get; set; } // ProfessorID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Course> Courses { get; set; } // COURSE.FK_COURSE_DEPARTMENT
        public virtual System.Collections.Generic.ICollection<Professor> Professors { get; set; } // PROFESSOR.FK_PROFESSOR_DEPARTMENT
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // STUDENT.FK_STUDENT_DEPARTMENT

        // Foreign keys
        public virtual Professor Professor { get; set; } // FK_DEPARTMENT_PROFESSOR
        public virtual School School { get; set; } // FK_DEPARTMENT_SCHOOL

        public Department()
        {
            Courses = new System.Collections.Generic.List<Course>();
            Professors = new System.Collections.Generic.List<Professor>();
            Students = new System.Collections.Generic.List<Student>();
        }
    }

    // ENROLLMENT
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Enrollment
    {
        public int EnrollmentId { get; set; } // EnrollmentID (Primary key)
        public System.DateTime? EnrollmentDate { get; set; } // EnrollmentDate
        public string EnrollmentGrade { get; set; } // EnrollmentGrade (length: 50)
        public int? StudentId { get; set; } // StudentID
        public string ClassId { get; set; } // ClassID (length: 50)

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Grade> Grades { get; set; } // GRADE.FK_GRADE_ENROLLMENT

        // Foreign keys
        public virtual Class Class { get; set; } // FK_ENROLLMENT_CLASS
        public virtual Student Student { get; set; } // FK_ENROLLMENT_STUDENT

        public Enrollment()
        {
            Grades = new System.Collections.Generic.List<Grade>();
        }
    }

    // GRADE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Grade
    {
        public int GradeId { get; set; } // GradeId (Primary key)
        public int? EnrollmentId { get; set; } // EnrollmentId
        public double? Prelim { get; set; } // Prelim
        public double? Midterm { get; set; } // Midterm
        public double? Prefinal { get; set; } // Prefinal
        public double? Final { get; set; } // Final

        // Foreign keys
        public virtual Enrollment Enrollment { get; set; } // FK_GRADE_ENROLLMENT
    }

    // PROFESSOR
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Professor
    {
        public int ProfessorId { get; set; } // ProfessorID (Primary key)
        public string ProfessorFamilyName { get; set; } // ProfessorFamilyName (length: 100)
        public string ProfessorFirstName { get; set; } // ProfessorFirstName (length: 150)
        public string ProfessorMiddleName { get; set; } // ProfessorMiddleName (length: 100)
        public string ProfessorAddress { get; set; } // ProfessorAddress (length: 200)
        public string ProfessorContactNumber { get; set; } // ProfessorContactNumber (length: 50)
        public System.DateTime? ProfessorDateOfBirth { get; set; } // ProfessorDateOfBirth
        public string ProfessorStatus { get; set; } // ProfessorStatus (length: 50)
        public int? NoOfSubjects { get; set; } // NoOfSubjects
        public bool IsSchoolHead { get; set; } // IsSchoolHead
        public int? CreditUnits { get; set; } // CreditUnits
        public bool IsDepartmentHead { get; set; } // IsDepartmentHead
        public int? DepartmentId { get; set; } // DepartmentID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Class> Classes { get; set; } // CLASS.FK_CLASS_PROFESSOR
        public virtual System.Collections.Generic.ICollection<Department> Departments { get; set; } // DEPARTMENT.FK_DEPARTMENT_PROFESSOR
        public virtual System.Collections.Generic.ICollection<School> Schools { get; set; } // SCHOOL.FK_SCHOOL_PROFESSOR
        public virtual System.Collections.Generic.ICollection<Student> Students { get; set; } // STUDENT.FK_STUDENT_PROFESSOR

        // Foreign keys
        public virtual Department Department { get; set; } // FK_PROFESSOR_DEPARTMENT

        public Professor()
        {
            Classes = new System.Collections.Generic.List<Class>();
            Departments = new System.Collections.Generic.List<Department>();
            Schools = new System.Collections.Generic.List<School>();
            Students = new System.Collections.Generic.List<Student>();
        }
    }

    // ROOM
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Room
    {
        public int RoomId { get; set; } // RoomID (Primary key)
        public string RoomName { get; set; } // RoomName (length: 50)
        public int? BuildingId { get; set; } // BuildingID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Class> Classes { get; set; } // CLASS.FK_CLASS_ROOM

        // Foreign keys
        public virtual Building Building { get; set; } // FK_ROOM_BUILDING

        public Room()
        {
            Classes = new System.Collections.Generic.List<Class>();
        }
    }

    // SCHOOL
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class School
    {
        public int SchoolId { get; set; } // SchoolID (Primary key)
        public string SchoolName { get; set; } // SchoolName (length: 100)
        public string SchoolAddress { get; set; } // SchoolAddress (length: 100)
        public int? ProfessorId { get; set; } // ProfessorID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Department> Departments { get; set; } // DEPARTMENT.FK_DEPARTMENT_SCHOOL

        // Foreign keys
        public virtual Professor Professor { get; set; } // FK_SCHOOL_PROFESSOR

        public School()
        {
            Departments = new System.Collections.Generic.List<Department>();
        }
    }

    // STUDENT
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Student
    {
        public int StudentId { get; set; } // StudentID (Primary key)
        public string StudentFamilyName { get; set; } // StudentFamilyName (length: 100)
        public string StudentFirstName { get; set; } // StudentFirstName (length: 150)
        public string StudentMiddleName { get; set; } // StudentMiddleName (length: 100)
        public string StudentAddress { get; set; } // StudentAddress (length: 200)
        public string StudentContactNumber { get; set; } // StudentContactNumber (length: 50)
        public System.DateTime? StudentDateOfBirth { get; set; } // StudentDateOfBirth
        public string StudentStatus { get; set; } // StudentStatus (length: 50)
        public int? StudentUnitsTaken { get; set; } // StudentUnitsTaken
        public int? DepartmentId { get; set; } // DepartmentID
        public int? NoOfSubjects { get; set; } // NoOfSubjects
        public int? ProfessorId { get; set; } // ProfessorID

        // Reverse navigation
        public virtual System.Collections.Generic.ICollection<Enrollment> Enrollments { get; set; } // ENROLLMENT.FK_ENROLLMENT_STUDENT

        // Foreign keys
        public virtual Department Department { get; set; } // FK_STUDENT_DEPARTMENT
        public virtual Professor Professor { get; set; } // FK_STUDENT_PROFESSOR

        public Student()
        {
            Enrollments = new System.Collections.Generic.List<Enrollment>();
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class Sysdiagram
    {
        public string Name { get; set; } // name (length: 128)
        public int PrincipalId { get; set; } // principal_id
        public int DiagramId { get; set; } // diagram_id (Primary key)
        public int? Version { get; set; } // version
        public byte[] Definition { get; set; } // definition
    }

    #endregion

    #region POCO Configuration

    // BUILDING
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class BuildingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Building>
    {
        public BuildingConfiguration()
            : this("dbo")
        {
        }

        public BuildingConfiguration(string schema)
        {
            ToTable("BUILDING", schema);
            HasKey(x => x.BuildingId);

            Property(x => x.BuildingId).HasColumnName(@"BuildingID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.BuildingName).HasColumnName(@"BuildingName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.BuildingLocation).HasColumnName(@"BuildingLocation").IsOptional().HasColumnType("nvarchar").HasMaxLength(200);
        }
    }

    // CLASS
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ClassConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Class>
    {
        public ClassConfiguration()
            : this("dbo")
        {
        }

        public ClassConfiguration(string schema)
        {
            ToTable("CLASS", schema);
            HasKey(x => x.ClassId);

            Property(x => x.ClassId).HasColumnName(@"ClassID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ClassName).HasColumnName(@"ClassName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.Time).HasColumnName(@"Time").IsOptional().HasColumnType("nvarchar").HasMaxLength(1000);
            Property(x => x.CourseId).HasColumnName(@"CourseID").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProfessorId).HasColumnName(@"ProfessorID").IsOptional().HasColumnType("int");
            Property(x => x.Capacity).HasColumnName(@"Capacity").IsOptional().HasColumnType("int");
            Property(x => x.Day).HasColumnName(@"Day").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.RoomId).HasColumnName(@"RoomID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Course).WithMany(b => b.Classes).HasForeignKey(c => c.CourseId).WillCascadeOnDelete(false); // FK_CLASS_COURSE
            HasOptional(a => a.Professor).WithMany(b => b.Classes).HasForeignKey(c => c.ProfessorId).WillCascadeOnDelete(false); // FK_CLASS_PROFESSOR
            HasOptional(a => a.Room).WithMany(b => b.Classes).HasForeignKey(c => c.RoomId).WillCascadeOnDelete(false); // FK_CLASS_ROOM
        }
    }

    // COURSE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class CourseConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Course>
    {
        public CourseConfiguration()
            : this("dbo")
        {
        }

        public CourseConfiguration(string schema)
        {
            ToTable("COURSE", schema);
            HasKey(x => x.CourseId);

            Property(x => x.CourseId).HasColumnName(@"CourseID").IsRequired().HasColumnType("nvarchar").HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.CourseName).HasColumnName(@"CourseName").IsOptional().HasColumnType("nvarchar").HasMaxLength(200);
            Property(x => x.CourseUnits).HasColumnName(@"CourseUnits").IsOptional().HasColumnType("int");
            Property(x => x.IsPostGraduate).HasColumnName(@"IsPostGraduate").IsOptional().HasColumnType("bit");
            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Department).WithMany(b => b.Courses).HasForeignKey(c => c.DepartmentId).WillCascadeOnDelete(false); // FK_COURSE_DEPARTMENT
        }
    }

    // DEPARTMENT
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class DepartmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Department>
    {
        public DepartmentConfiguration()
            : this("dbo")
        {
        }

        public DepartmentConfiguration(string schema)
        {
            ToTable("DEPARTMENT", schema);
            HasKey(x => x.DepartmentId);

            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.DepartmentName).HasColumnName(@"DepartmentName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.SchoolId).HasColumnName(@"SchoolID").IsOptional().HasColumnType("int");
            Property(x => x.ProfessorId).HasColumnName(@"ProfessorID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Professor).WithMany(b => b.Departments).HasForeignKey(c => c.ProfessorId).WillCascadeOnDelete(false); // FK_DEPARTMENT_PROFESSOR
            HasOptional(a => a.School).WithMany(b => b.Departments).HasForeignKey(c => c.SchoolId).WillCascadeOnDelete(false); // FK_DEPARTMENT_SCHOOL
        }
    }

    // ENROLLMENT
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class EnrollmentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Enrollment>
    {
        public EnrollmentConfiguration()
            : this("dbo")
        {
        }

        public EnrollmentConfiguration(string schema)
        {
            ToTable("ENROLLMENT", schema);
            HasKey(x => x.EnrollmentId);

            Property(x => x.EnrollmentId).HasColumnName(@"EnrollmentID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EnrollmentDate).HasColumnName(@"EnrollmentDate").IsOptional().HasColumnType("datetime2");
            Property(x => x.EnrollmentGrade).HasColumnName(@"EnrollmentGrade").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StudentId).HasColumnName(@"StudentID").IsOptional().HasColumnType("int");
            Property(x => x.ClassId).HasColumnName(@"ClassID").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);

            // Foreign keys
            HasOptional(a => a.Class).WithMany(b => b.Enrollments).HasForeignKey(c => c.ClassId).WillCascadeOnDelete(false); // FK_ENROLLMENT_CLASS
            HasOptional(a => a.Student).WithMany(b => b.Enrollments).HasForeignKey(c => c.StudentId).WillCascadeOnDelete(false); // FK_ENROLLMENT_STUDENT
        }
    }

    // GRADE
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class GradeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Grade>
    {
        public GradeConfiguration()
            : this("dbo")
        {
        }

        public GradeConfiguration(string schema)
        {
            ToTable("GRADE", schema);
            HasKey(x => x.GradeId);

            Property(x => x.GradeId).HasColumnName(@"GradeId").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.EnrollmentId).HasColumnName(@"EnrollmentId").IsOptional().HasColumnType("int");
            Property(x => x.Prelim).HasColumnName(@"Prelim").IsOptional().HasColumnType("float");
            Property(x => x.Midterm).HasColumnName(@"Midterm").IsOptional().HasColumnType("float");
            Property(x => x.Prefinal).HasColumnName(@"Prefinal").IsOptional().HasColumnType("float");
            Property(x => x.Final).HasColumnName(@"Final").IsOptional().HasColumnType("float");

            // Foreign keys
            HasOptional(a => a.Enrollment).WithMany(b => b.Grades).HasForeignKey(c => c.EnrollmentId).WillCascadeOnDelete(false); // FK_GRADE_ENROLLMENT
        }
    }

    // PROFESSOR
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class ProfessorConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Professor>
    {
        public ProfessorConfiguration()
            : this("dbo")
        {
        }

        public ProfessorConfiguration(string schema)
        {
            ToTable("PROFESSOR", schema);
            HasKey(x => x.ProfessorId);

            Property(x => x.ProfessorId).HasColumnName(@"ProfessorID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ProfessorFamilyName).HasColumnName(@"ProfessorFamilyName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.ProfessorFirstName).HasColumnName(@"ProfessorFirstName").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.ProfessorMiddleName).HasColumnName(@"ProfessorMiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.ProfessorAddress).HasColumnName(@"ProfessorAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(200);
            Property(x => x.ProfessorContactNumber).HasColumnName(@"ProfessorContactNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.ProfessorDateOfBirth).HasColumnName(@"ProfessorDateOfBirth").IsOptional().HasColumnType("datetime2");
            Property(x => x.ProfessorStatus).HasColumnName(@"ProfessorStatus").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.NoOfSubjects).HasColumnName(@"NoOfSubjects").IsOptional().HasColumnType("int");
            Property(x => x.IsSchoolHead).HasColumnName(@"IsSchoolHead").IsRequired().HasColumnType("bit");
            Property(x => x.CreditUnits).HasColumnName(@"CreditUnits").IsOptional().HasColumnType("int");
            Property(x => x.IsDepartmentHead).HasColumnName(@"IsDepartmentHead").IsRequired().HasColumnType("bit");
            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Department).WithMany(b => b.Professors).HasForeignKey(c => c.DepartmentId).WillCascadeOnDelete(false); // FK_PROFESSOR_DEPARTMENT
        }
    }

    // ROOM
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class RoomConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Room>
    {
        public RoomConfiguration()
            : this("dbo")
        {
        }

        public RoomConfiguration(string schema)
        {
            ToTable("ROOM", schema);
            HasKey(x => x.RoomId);

            Property(x => x.RoomId).HasColumnName(@"RoomID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.RoomName).HasColumnName(@"RoomName").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.BuildingId).HasColumnName(@"BuildingID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Building).WithMany(b => b.Rooms).HasForeignKey(c => c.BuildingId).WillCascadeOnDelete(false); // FK_ROOM_BUILDING
        }
    }

    // SCHOOL
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SchoolConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<School>
    {
        public SchoolConfiguration()
            : this("dbo")
        {
        }

        public SchoolConfiguration(string schema)
        {
            ToTable("SCHOOL", schema);
            HasKey(x => x.SchoolId);

            Property(x => x.SchoolId).HasColumnName(@"SchoolID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.SchoolName).HasColumnName(@"SchoolName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.SchoolAddress).HasColumnName(@"SchoolAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.ProfessorId).HasColumnName(@"ProfessorID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Professor).WithMany(b => b.Schools).HasForeignKey(c => c.ProfessorId).WillCascadeOnDelete(false); // FK_SCHOOL_PROFESSOR
        }
    }

    // STUDENT
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class StudentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Student>
    {
        public StudentConfiguration()
            : this("dbo")
        {
        }

        public StudentConfiguration(string schema)
        {
            ToTable("STUDENT", schema);
            HasKey(x => x.StudentId);

            Property(x => x.StudentId).HasColumnName(@"StudentID").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.StudentFamilyName).HasColumnName(@"StudentFamilyName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.StudentFirstName).HasColumnName(@"StudentFirstName").IsOptional().HasColumnType("nvarchar").HasMaxLength(150);
            Property(x => x.StudentMiddleName).HasColumnName(@"StudentMiddleName").IsOptional().HasColumnType("nvarchar").HasMaxLength(100);
            Property(x => x.StudentAddress).HasColumnName(@"StudentAddress").IsOptional().HasColumnType("nvarchar").HasMaxLength(200);
            Property(x => x.StudentContactNumber).HasColumnName(@"StudentContactNumber").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StudentDateOfBirth).HasColumnName(@"StudentDateOfBirth").IsOptional().HasColumnType("datetime2");
            Property(x => x.StudentStatus).HasColumnName(@"StudentStatus").IsOptional().HasColumnType("nvarchar").HasMaxLength(50);
            Property(x => x.StudentUnitsTaken).HasColumnName(@"StudentUnitsTaken").IsOptional().HasColumnType("int");
            Property(x => x.DepartmentId).HasColumnName(@"DepartmentID").IsOptional().HasColumnType("int");
            Property(x => x.NoOfSubjects).HasColumnName(@"NoOfSubjects").IsOptional().HasColumnType("int");
            Property(x => x.ProfessorId).HasColumnName(@"ProfessorID").IsOptional().HasColumnType("int");

            // Foreign keys
            HasOptional(a => a.Department).WithMany(b => b.Students).HasForeignKey(c => c.DepartmentId).WillCascadeOnDelete(false); // FK_STUDENT_DEPARTMENT
            HasOptional(a => a.Professor).WithMany(b => b.Students).HasForeignKey(c => c.ProfessorId).WillCascadeOnDelete(false); // FK_STUDENT_PROFESSOR
        }
    }

    // sysdiagrams
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.24.0.0")]
    public class SysdiagramConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Sysdiagram>
    {
        public SysdiagramConfiguration()
            : this("dbo")
        {
        }

        public SysdiagramConfiguration(string schema)
        {
            ToTable("sysdiagrams", schema);
            HasKey(x => x.DiagramId);

            Property(x => x.Name).HasColumnName(@"name").IsRequired().HasColumnType("nvarchar").HasMaxLength(128);
            Property(x => x.PrincipalId).HasColumnName(@"principal_id").IsRequired().HasColumnType("int");
            Property(x => x.DiagramId).HasColumnName(@"diagram_id").IsRequired().HasColumnType("int").HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.Version).HasColumnName(@"version").IsOptional().HasColumnType("int");
            Property(x => x.Definition).HasColumnName(@"definition").IsOptional().HasColumnType("varbinary");
        }
    }

    #endregion

}
// </auto-generated>

